#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <complex.h>

#define MAX_ITER 1000
#define WIDTH 800
#define HEIGHT 800

int main()
{
    // définir la fenêtre d'affichage de la fractale
    double xmin = -2.0;
    double xmax = 2.0;
    double ymin = -2.0;
    double ymax = 2.0;

    // allouer de la mémoire pour l'image
    unsigned char* image = (unsigned char*) malloc(WIDTH * HEIGHT * sizeof(unsigned char));

    // boucler à travers chaque pixel de l'image
    for (int y = 0; y < HEIGHT; y++)
    {
        for (int x = 0; x < WIDTH; x++)
        {
            // calculer la valeur de c pour ce pixel
            double complex c = xmin + (xmax - xmin) * x / (double) WIDTH + (ymin + (ymax - ymin) * y / (double) HEIGHT) * I;
            
            // initialiser z à 0
            double complex z = 0;
            
            // effectuer l'itération de la formule de Mandelbrot jusqu'à convergence ou MAX_ITER
            int i;
            for (i = 0; i < MAX_ITER; i++)
            {
                z = z * z + c;
                if (cabs(z) > 2.0) break;
            }
            
            // définir la valeur du pixel en fonction du nombre d'itérations
            if (i == MAX_ITER)
            {
                image[y * WIDTH + x] = 0;  // noir
            }
            else
            {
                image[y * WIDTH + x] = (unsigned char) (i * 255 / MAX_ITER);  // échelle de gris
            }
        }
    }

    // écrire l'image au format PGM
    FILE* fp = fopen("mandelbrot.pgm", "wb");
    fprintf(fp, "P5\n%d %d\n255\n", WIDTH, HEIGHT);
    fwrite(image, sizeof(unsigned char), WIDTH * HEIGHT, fp);
    fclose(fp);

    // libérer la mémoire
    free(image);

    return 0;
}

